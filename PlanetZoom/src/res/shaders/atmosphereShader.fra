#version 330 

out vec4 out_Color; 

uniform float miePhaseAsymetryFactor;
uniform vec3 lightPosition;

in vec3 pass_color;
in vec3 pass_color2;
in vec3 direction;

//Henyey-Greenstein phase function
float phase(float scatteringSymetrie) // parameter = g
{
	float gSquared = scatteringSymetrie * scatteringSymetrie;
	float cos = dot(lightPosition, direction) / length(direction); //cos(theta); 
	float fMiePhase = 1.5 * ((1.0 - gSquared) / (2.0 + gSquared)) * (1.0 + cos * cos); 
	fMiePhase /= pow(1.0 + gSquared - 2.0 * scatteringSymetrie * cos, 1.5);
	
	return fMiePhase;
}

void main(void)
{
	float fMiePhase = phase(miePhaseAsymetryFactor);

	vec3 tmp = (pass_color + fMiePhase * pass_color2)/2;
	out_Color = vec4(tmp, tmp.x + tmp.y + tmp.z);

	//out_Color = vec4(direction, 1);


}