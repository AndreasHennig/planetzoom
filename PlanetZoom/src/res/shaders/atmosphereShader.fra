#version 330 

out vec4 out_Color; 

uniform float miePhaseAsymetryFactor;
uniform vec3 lightPosition;

in vec3 pass_color;
in vec3 pass_color2;
in vec3 direction;


void main(void)
{

	
	float g2 = miePhaseAsymetryFactor * miePhaseAsymetryFactor;
	float fCos = dot(lightPosition, direction) / length(direction);
	float fMiePhase = 1.5 * ((1.0 - g2) / (2.0 + g2)) * (1.0 + fCos * fCos) / pow(1.0 + g2 - 2.0 * miePhaseAsymetryFactor * fCos, 1.5);
	


	out_Color = vec4(pass_color, pass_color.x);
	//out_Color = vec4(direction, 1);


}